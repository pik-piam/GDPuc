[{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pik-piam.github.io/GDPuc/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://pik-piam.github.io/GDPuc/articles/handle_NAs.html","id":"the-replace_nas-argument","dir":"Articles","previous_headings":"","what":"The replace_NAs argument","title":"Handling missing conversion factors","text":"Use replace_NAs argument convertGDP handle missing conversion factors.","code":""},{"path":"https://pik-piam.github.io/GDPuc/articles/handle_NAs.html","id":"replace_nas-null-or-na","dir":"Articles","previous_headings":"The replace_NAs argument","what":"replace_NAs = NULL or NA","title":"Handling missing conversion factors","text":"default, replace_NAs NULL, NAs returned along warning. Set replace_NAs = NA explicitly return NAs without warning. , return_cfs argument set TRUE inspect conversion factors, along side result. eliminate warning: can also use GDPuc.warn option suppress warnings convertGDP general (see “Silence warnings”).","code":"library(GDPuc)  # Test with Venezuela -> iso3c = VEN my_gdp <- tibble::tibble(   iso3c = c(\"VEN\"),   year = 2010:2014,   value = 100:104 )  x <- convertGDP(   gdp = my_gdp,   unit_in = \"constant 2005 Int$PPP\",   unit_out = \"constant 2019 Int$PPP\",   return_cfs = TRUE ) #> Warning: NAs have been generated for countries lacking conversion factors! x$result #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 VEN    2010    NA #> 2 VEN    2011    NA #> 3 VEN    2012    NA #> 4 VEN    2013    NA #> 5 VEN    2014    NA  x$cfs #> # A tibble: 1 × 4 #>   iso3c \\033[34m2005 PPP convers…¹ \\033[34m2019 value o…² \\033[34m2019 PPP con…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 VEN                        0.842                     NA                     NA #> # ℹ abbreviated names: #> #   ¹​`\\033[34m2005 PPP conversion factor\\033[39m in (LCU per international $)`, #> #   ²​`\\033[34m2019 value of base 2005 GDP deflator\\033[39m in (constant 2019 LCU per constant 2005 LCU)`, #> #   ³​`\\033[34m2019 PPP conversion factor\\033[39m in (LCU per international $)` x <- convertGDP(   gdp = my_gdp,    unit_in = \"constant 2005 Int$PPP\",    unit_out = \"constant 2019 Int$PPP\",   replace_NAs = NA )"},{"path":"https://pik-piam.github.io/GDPuc/articles/handle_NAs.html","id":"replace_nas-0","dir":"Articles","previous_headings":"The replace_NAs argument","what":"replace_NAs = 0","title":"Handling missing conversion factors","text":"set 0, resulting NAs set 0.","code":"my_gdp <- tibble::tibble(   iso3c = \"VEN\",   year = 2010:2014,   value = 100:104 )  x <- convertGDP(   gdp = my_gdp,   unit_in = \"constant 2005 Int$PPP\",   unit_out = \"constant 2019 Int$PPP\",   replace_NAs = 0,   return_cfs = TRUE ) x$result #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 VEN    2010     0 #> 2 VEN    2011     0 #> 3 VEN    2012     0 #> 4 VEN    2013     0 #> 5 VEN    2014     0  x$cfs #> # A tibble: 1 × 4 #>   iso3c \\033[34m2005 PPP convers…¹ \\033[34m2019 value o…² \\033[34m2019 PPP con…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 VEN                        0.842                     NA                     NA #> # ℹ abbreviated names: #> #   ¹​`\\033[34m2005 PPP conversion factor\\033[39m in (LCU per international $)`, #> #   ²​`\\033[34m2019 value of base 2005 GDP deflator\\033[39m in (constant 2019 LCU per constant 2005 LCU)`, #> #   ³​`\\033[34m2019 PPP conversion factor\\033[39m in (LCU per international $)`"},{"path":"https://pik-piam.github.io/GDPuc/articles/handle_NAs.html","id":"replace_nas-no_conversion","dir":"Articles","previous_headings":"The replace_NAs argument","what":"replace_NAs = “no_conversion”","title":"Handling missing conversion factors","text":"set “no_conversion”, NAs replaced values gdp argument.","code":"my_gdp <- tibble::tibble(   iso3c = \"VEN\",   year = 2010:2014,   value = 100:104 )  x <- convertGDP(   gdp = my_gdp,   unit_in = \"constant 2005 Int$PPP\",   unit_out = \"constant 2019 Int$PPP\",   replace_NAs = \"no_conversion\",   return_cfs = TRUE ) x$result #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 VEN    2010   100 #> 2 VEN    2011   101 #> 3 VEN    2012   102 #> 4 VEN    2013   103 #> 5 VEN    2014   104  x$cfs #> # A tibble: 1 × 4 #>   iso3c \\033[34m2005 PPP convers…¹ \\033[34m2019 value o…² \\033[34m2019 PPP con…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 VEN                        0.842                     NA                     NA #> # ℹ abbreviated names: #> #   ¹​`\\033[34m2005 PPP conversion factor\\033[39m in (LCU per international $)`, #> #   ²​`\\033[34m2019 value of base 2005 GDP deflator\\033[39m in (constant 2019 LCU per constant 2005 LCU)`, #> #   ³​`\\033[34m2019 PPP conversion factor\\033[39m in (LCU per international $)`"},{"path":"https://pik-piam.github.io/GDPuc/articles/handle_NAs.html","id":"replace_nas-linear","dir":"Articles","previous_headings":"The replace_NAs argument","what":"replace_NAs = “linear”","title":"Handling missing conversion factors","text":"set “linear”, missing conversion factors inter- extrapolated linearly. extrapolation, closest 5 data points used.","code":"my_gdp <- tibble::tibble(   iso3c = \"VEN\",   year = 2010:2014,   value = 100:104 )  x <- convertGDP(   gdp = my_gdp,   unit_in = \"constant 2005 Int$PPP\",   unit_out = \"constant 2019 Int$PPP\",   replace_NAs = \"linear\",   return_cfs = TRUE ) x$result #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 VEN    2010  203. #> 2 VEN    2011  205. #> 3 VEN    2012  208. #> 4 VEN    2013  210. #> 5 VEN    2014  212.  x$cfs #> # A tibble: 1 × 4 #>   iso3c \\033[34m2005 PPP convers…¹ \\033[34m2019 value o…² \\033[34m2019 PPP con…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 VEN                        0.842                   14.4                   5.97 #> # ℹ abbreviated names: #> #   ¹​`\\033[34m2005 PPP conversion factor\\033[39m in (LCU per international $)`, #> #   ²​`\\033[34m2019 value of base 2005 GDP deflator\\033[39m in (constant 2019 LCU per constant 2005 LCU)`, #> #   ³​`\\033[34m2019 PPP conversion factor\\033[39m in (LCU per international $)`"},{"path":"https://pik-piam.github.io/GDPuc/articles/handle_NAs.html","id":"replace_nas-regional_average","dir":"Articles","previous_headings":"The replace_NAs argument","what":"replace_NAs = “regional_average”","title":"Handling missing conversion factors","text":"set “regional_average”, regional GDP-weighted averages used. Requires region-mapping, column source object GDP data PPP, used weight. May lead misleading results, use care!","code":"my_gdp <- tibble::tibble(   iso3c = \"VEN\",   year = 2010:2014,   value = 100:104 )  my_mapping_data_frame <- tibble::tibble(   iso3c = c(\"VEN\", \"BRA\", \"ARG\", \"COL\"),   region = \"LAM\" )  x <- convertGDP(   gdp = my_gdp,   unit_in = \"constant 2005 Int$PPP\",   unit_out = \"constant 2019 Int$PPP\",   replace_NAs = \"regional_average\",   with_regions = my_mapping_data_frame,   return_cfs = TRUE ) x$result #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 VEN    2010 0.485 #> 2 VEN    2011 0.489 #> 3 VEN    2012 0.494 #> 4 VEN    2013 0.499 #> 5 VEN    2014 0.504  x$cfs #> # A tibble: 1 × 3 #>   iso3c \\033[34m2019 value of base 2005 GDP deflator\\03…¹ \\033[34m2019 PPP con…² #>   <chr>                                             <dbl>                  <dbl> #> 1 VEN                                                1.18                   205. #> # ℹ abbreviated names: #> #   ¹​`\\033[34m2019 value of base 2005 GDP deflator\\033[39m in (constant 2019 LCU per constant 2005 LCU)`, #> #   ²​`\\033[34m2019 PPP conversion factor\\033[39m in (LCU per international $)`  # Compare the 2019 PPP with the 2005 PPP. They are not in the same order of magnitude.  # Obviously, being a part of the same region, does not mean the currencies are of the same strength."},{"path":"https://pik-piam.github.io/GDPuc/articles/handle_NAs.html","id":"replace_nas-clinear","dir":"Articles","previous_headings":"The replace_NAs argument","what":"replace_NAs = c(“linear”, “…”)","title":"Handling missing conversion factors","text":"vector passed, “linear” first element, operations done sequence. example c(“linear”, 0), missing conversion factors first inter- extrapolated linearly missing conversion factors still lead NAs, replaced 0.","code":"# Create an imaginary country XXX, and add it to the Latin America region my_gdp <- tibble::tibble(   iso3c = c(\"VEN\", \"XXX\"),   year = 2010,   value = 100 )  my_mapping_data_frame <- tibble::tibble(   iso3c = c(\"VEN\", \"BRA\", \"ARG\", \"COL\", \"XXX\"),   region = \"LAM\" )  x <- convertGDP(   gdp = my_gdp,   unit_in = \"constant 2005 Int$PPP\",   unit_out = \"constant 2019 Int$PPP\",   replace_NAs = c(\"linear\", 0),   with_regions = my_mapping_data_frame,   return_cfs = TRUE ) x$result #> # A tibble: 2 × 3 #>   iso3c  year value #>   <chr> <dbl> <dbl> #> 1 VEN    2010  203. #> 2 XXX    2010    0  x$cfs #> # A tibble: 2 × 3 #>   iso3c \\033[34m2019 value of base 2005 GDP deflator\\03…¹ \\033[34m2019 PPP con…² #>   <chr>                                             <dbl>                  <dbl> #> 1 VEN                                                14.4                   5.97 #> 2 XXX                                                NA                    NA    #> # ℹ abbreviated names: #> #   ¹​`\\033[34m2019 value of base 2005 GDP deflator\\033[39ms in (constant 2019 LCU per constant 2005 LCU)`, #> #   ²​`\\033[34m2019 PPP conversion factor\\033[39ms in (LCU per international $)`"},{"path":"https://pik-piam.github.io/GDPuc/articles/handle_NAs.html","id":"replace_nas-with_usa","dir":"Articles","previous_headings":"The replace_NAs argument","what":"replace_NAs = “with_USA”","title":"Handling missing conversion factors","text":"set “with_USA”, missing conversion factors extended using growth rates USA. possible (instance data years ) data countries converted using conversion factors USA.","code":"# Venezuela is only missing conversion factors in 2019, AIA has no conversion factors at all. my_gdp <- tibble::tibble(   iso3c = c(\"VEN\", \"AIA\", \"USA\"),   value = 100 )  x <- convertGDP(   gdp = my_gdp,   unit_in = \"constant 2005 Int$PPP\",   unit_out = \"constant 2019 Int$PPP\",   replace_NAs = \"with_USA\",   return_cfs = TRUE ) x$result #> # A tibble: 3 × 2 #>   iso3c value #>   <chr> <dbl> #> 1 VEN    264. #> 2 AIA    128. #> 3 USA    128.  x$cfs #> # A tibble: 3 × 4 #>   iso3c \\033[34m2005 PPP convers…¹ \\033[34m2019 value o…² \\033[34m2019 PPP con…³ #>   <chr>                      <dbl>                  <dbl>                  <dbl> #> 1 USA                        1                       1.28                   1    #> 2 VEN                        0.842                   8.40                   2.68 #> 3 AIA                        1                       1.28                   1    #> # ℹ abbreviated names: #> #   ¹​`\\033[34m2005 PPP conversion factor\\033[39ms in (LCU per international $)`, #> #   ²​`\\033[34m2019 value of base 2005 GDP deflator\\033[39ms in (constant 2019 LCU per constant 2005 LCU)`, #> #   ³​`\\033[34m2019 PPP conversion factor\\033[39ms in (LCU per international $)`"},{"path":"https://pik-piam.github.io/GDPuc/articles/source.html","id":"the-source-argument","dir":"Articles","previous_headings":"","what":"The source argument","title":"Choosing conversion factors","text":"Use source argument convertGDP control source underlying conversion factors (GDP deflators, MERs PPPs). can one sources shipped package user-defined object.","code":""},{"path":"https://pik-piam.github.io/GDPuc/articles/source.html","id":"package-internal-sources","dir":"Articles","previous_headings":"The source argument","what":"Package internal ‘sources’","title":"Choosing conversion factors","text":"two source options shipped package, wb_wdi wb_wdi_linked, wb_wdi set default. Pass name shipped source source argument use . Use function print_source_info print information specific, available sources. Use ::: operator take closer look sources shipped GDPuc.","code":"library(GDPuc)  my_gdp <- tibble::tibble(   iso3c = \"USA\",    year = 2010:2014,    value = 100:104 )  convertGDP(   gdp = my_gdp,    unit_in = \"constant 2010 LCU\",    unit_out = \"constant 2014 Int$PPP\",   source = \"wb_wdi_linked\",   verbose = TRUE ) #> ℹ Converting GDP with conversion factors from wb_wdi_linked: #> constant 2010 LCU → constant 2014 LCU #> 2014 value of base 2010 GDP deflator in (constant 2014 LCU per constant 2010 #> LCU) used: #> USA: 1.07786 #> constant 2014 LCU → constant 2014 Int$PPP #> 2014 PPP conversion factor in (LCU per international $) used: #> USA: 1 #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 USA    2010  108. #> 2 USA    2011  109. #> 3 USA    2012  110. #> 4 USA    2013  111. #> 5 USA    2014  112. print_source_info(\"wb_wdi\") #> ── wb_wdi ────────────────────────────────────────────────────────────────────── #> → Origin: The World Bank's World Development Indicator Database #> → Date: Downloaded on the 30th of April 2024 #> → Html: https://databank.worldbank.org/source/world-development-indicators #> → Note: Uses the GDP deflator. #> ──────────────────────────────────────────────────────────────────────────────── print_source_info() #> ℹ Sources available: #> ── wb_wdi ────────────────────────────────────────────────────────────────────── #> → Origin: The World Bank's World Development Indicator Database #> → Date: Downloaded on the 30th of April 2024 #> → Html: https://databank.worldbank.org/source/world-development-indicators #> → Note: Uses the GDP deflator. #> ──────────────────────────────────────────────────────────────────────────────── #> ── wb_wdi_linked ─────────────────────────────────────────────────────────────── #> → Origin: The World Bank's World Development Indicator Database #> → Date: Downloaded on the 30th of April 2024 #> → Html: https://databank.worldbank.org/source/world-development-indicators #> → Note: Uses the linked GDP deflator. #> ──────────────────────────────────────────────────────────────────────────────── #> ── wb_wdi_cpi ────────────────────────────────────────────────────────────────── #> → Origin: The World Bank's World Development Indicator Database #> → Date: Downloaded on the 30th of April 2024 #> → Html: https://databank.worldbank.org/source/world-development-indicators #> → Note: Uses the CPI as deflator. #> ──────────────────────────────────────────────────────────────────────────────── GDPuc:::wb_wdi"},{"path":"https://pik-piam.github.io/GDPuc/articles/source.html","id":"user-defined-source-objects","dir":"Articles","previous_headings":"The source argument","what":"User-defined ‘source’ objects","title":"Choosing conversion factors","text":"tibble columns: “iso3c” (character), “year” (numeric), “GDP deflator” (numeric), “MER (LCU per US$)” (numeric), “PPP conversion factor, GDP (LCU per international $)” (numeric) can used source conversion factors.","code":"my_custom_source <- tibble::tibble(   iso3c = \"USA\",    year = 2010:2014,    \"GDP deflator\" = seq(1, 1.1, 0.025),   \"MER (LCU per US$)\" = 1,   \"PPP conversion factor, GDP (LCU per international $)\" = 1, ) print(my_custom_source) #> # A tibble: 5 × 5 #>   iso3c  year `GDP deflator` `MER (LCU per US$)` PPP conversion factor, GDP (L…¹ #>   <chr> <int>          <dbl>               <dbl>                           <dbl> #> 1 USA    2010           1                      1                               1 #> 2 USA    2011           1.02                   1                               1 #> 3 USA    2012           1.05                   1                               1 #> 4 USA    2013           1.08                   1                               1 #> 5 USA    2014           1.1                    1                               1 #> # ℹ abbreviated name: ¹​`PPP conversion factor, GDP (LCU per international $)`  convertGDP(   gdp = my_gdp,    unit_in = \"constant 2010 LCU\",    unit_out = \"constant 2014 Int$PPP\",   source = my_custom_source,   verbose = TRUE ) #> ℹ Converting GDP with conversion factors from user_provided: #> constant 2010 LCU → constant 2014 LCU #> 2014 value of base 2010 GDP deflator in (constant 2014 LCU per constant 2010 #> LCU) used: #> USA: 1.1 #> constant 2014 LCU → constant 2014 Int$PPP #> 2014 PPP conversion factor in (LCU per international $) used: #> USA: 1 #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 USA    2010  110  #> 2 USA    2011  111. #> 3 USA    2012  112. #> 4 USA    2013  113. #> 5 USA    2014  114."},{"path":"https://pik-piam.github.io/GDPuc/articles/source.html","id":"the-use_usa_cf_for_all-argument","dir":"Articles","previous_headings":"","what":"The use_USA_cf_for_all argument","title":"Choosing conversion factors","text":"cases may desirable use US conversion factors countries. instance, converting global scenario data modelling efforts, US$MER, another base year. Setting use_USA_cf_for_all TRUE ensures countries converted US conversion factors.","code":"my_gdp <- tibble::tibble(   iso3c = c(\"USA\", \"IND\"),    value = 100 )  # Normal conversion, with country specific conversion factors convertGDP(   gdp = my_gdp,    unit_in = \"constant 2005 US$MER\",    unit_out = \"constant 2020 US$MER\",   verbose = TRUE ) #> ℹ Converting GDP with conversion factors from wb_wdi: #> constant 2005 US$MER → constant 2005 LCU #> 2005 MERs in (LCU per US$) used: #> IND: 44.2736 #> USA: 1 #> constant 2005 LCU → constant 2020 LCU #> 2020 value of base 2005 GDP deflators in (constant 2020 LCU per constant 2005 #> LCU) used: #> IND: 2.35925 #> USA: 1.30033 #> constant 2020 LCU → constant 2020 US$MER #> 2020 MERs in (LCU per US$) used: #> IND: 74.225 #> USA: 1 #> # A tibble: 2 × 2 #>   iso3c value #>   <chr> <dbl> #> 1 USA    130. #> 2 IND    141.  # Using the US conversion factors for both countries convertGDP(   gdp = my_gdp,    unit_in = \"constant 2005 US$MER\",    unit_out = \"constant 2020 US$MER\",   use_USA_cf_for_all = TRUE,   verbose = TRUE ) #> ℹ Converting GDP with conversion factors from wb_wdi: #> constant 2005 US$MER → constant 2005 LCU #> 2005 MERs in (LCU per US$) used: #> IND: 1 #> USA: 1 #> constant 2005 LCU → constant 2020 LCU #> 2020 value of base 2005 GDP deflators in (constant 2020 LCU per constant 2005 #> LCU) used: #> IND: 1.30033 #> USA: 1.30033 #> constant 2020 LCU → constant 2020 US$MER #> 2020 MERs in (LCU per US$) used: #> IND: 1 #> USA: 1 #> # A tibble: 2 × 2 #>   iso3c value #>   <chr> <dbl> #> 1 USA    130. #> 2 IND    130."},{"path":"https://pik-piam.github.io/GDPuc/articles/verbose.html","id":"the-verbose-argument","dir":"Articles","previous_headings":"","what":"The verbose argument","title":"Getting information on the conversion process","text":"Set verbose argument convertGDP TRUE print underlying conversion steps factors. verbosity can also controlled via option GDPuc.verbose.","code":"library(GDPuc)  my_gdp <- tibble::tibble(   iso3c = \"USA\",    year = 2010:2014,    value = 100:104 )  convertGDP(   gdp = my_gdp,    unit_in = \"constant 2005 LCU\",    unit_out = \"constant 2017 Int$PPP\",   verbose = TRUE ) #> ℹ Converting GDP with conversion factors from wb_wdi: #> constant 2005 LCU → constant 2017 LCU #> 2017 value of base 2005 GDP deflator in (constant 2017 LCU per constant 2005 #> LCU) used: #> USA: 1.23136 #> constant 2017 LCU → constant 2017 Int$PPP #> 2017 PPP conversion factor in (LCU per international $) used: #> USA: 1 #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 USA    2010  123. #> 2 USA    2011  124. #> 3 USA    2012  126. #> 4 USA    2013  127. #> 5 USA    2014  128. options(GDPuc.verbose = TRUE)  convertGDP(   gdp = my_gdp,   unit_in = \"constant 2005 LCU\",   unit_out = \"constant 2017 Int$PPP\" ) #> ℹ Converting GDP with conversion factors from wb_wdi: #> constant 2005 LCU → constant 2017 LCU #> 2017 value of base 2005 GDP deflator in (constant 2017 LCU per constant 2005 #> LCU) used: #> USA: 1.23136 #> constant 2017 LCU → constant 2017 Int$PPP #> 2017 PPP conversion factor in (LCU per international $) used: #> USA: 1 #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 USA    2010  123. #> 2 USA    2011  124. #> 3 USA    2012  126. #> 4 USA    2013  127. #> 5 USA    2014  128.  options(GDPuc.verbose = FALSE)"},{"path":"https://pik-piam.github.io/GDPuc/articles/verbose.html","id":"the-return_cfs-argument","dir":"Articles","previous_headings":"","what":"The return_cfs argument","title":"Getting information on the conversion process","text":"Set return_cfs argument convertGDP TRUE return list length 2, result conversion factors used.","code":"convertGDP(   gdp = my_gdp,   unit_in = \"constant 2005 LCU\",   unit_out = \"constant 2017 Int$PPP\",    return_cfs = TRUE ) #> $result #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 USA    2010  123. #> 2 USA    2011  124. #> 3 USA    2012  126. #> 4 USA    2013  127. #> 5 USA    2014  128. #>  #> $cfs #> # A tibble: 1 × 3 #>   iso3c \\033[34m2017 value of base 2005 GDP deflator\\03…¹ \\033[34m2017 PPP con…² #>   <chr>                                             <dbl>                  <dbl> #> 1 USA                                                1.23                      1 #> # ℹ abbreviated names: #> #   ¹​`\\033[34m2017 value of base 2005 GDP deflator\\033[39m in (constant 2017 LCU per constant 2005 LCU)`, #> #   ²​`\\033[34m2017 PPP conversion factor\\033[39m in (LCU per international $)`"},{"path":"https://pik-piam.github.io/GDPuc/articles/verbose.html","id":"conversion-method","dir":"Articles","previous_headings":"","what":"Conversion method","title":"Getting information on the conversion process","text":"package makes us country-specific GDP deflators, Market Exchange Rates (MER), Purchasing Power Parity (PPP) conversion factors convert GDP values. Setting verbose argument TRUE make conversion process transparent allow analyze individual steps taken. conversion functions successfully tested World Bank’s World Development Indicator (WDI) data: given 2 WDI GDP series, convertGDP reliably convert one . said, converting GDP series can complex use package absolve one thinking carefully conversion done . using provided wd_wdi source, specifically concerns conversions using PPPs MERs together. PPP conversion factors provided World Bank based linked GDP deflators, MERs . means, converting World Bank’s current international dollar PPP series LCU, result “GDP: linked series (current LCU)”, converting current US dollar MER series LCU, result “GDP (current LCU)” series. Therefore, linked non-lined GDP deflators differ (often developing countries, general past one looks), converting current IntPPP current USMER result exact series given WDI data.","code":""},{"path":"https://pik-piam.github.io/GDPuc/articles/warn.html","id":"the-gdpuc-warn-option","dir":"Articles","previous_headings":"","what":"The GDPuc.warn option","title":"Silence warnings","text":"can silence warnings thrown convertGDP setting option GDPuc.warn = FALSE. affect calls convertGDP active R-session.","code":"options(GDPuc.warn = FALSE)"},{"path":"https://pik-piam.github.io/GDPuc/articles/warn.html","id":"the-replace_nas-argument","dir":"Articles","previous_headings":"","what":"The replace_NAs argument","title":"Silence warnings","text":"One warning thrown convertGDP comes addition NAs return object due missing conversion factors. NAs explicitly desired set replace_NAs = NA. silence warning.","code":""},{"path":"https://pik-piam.github.io/GDPuc/articles/with_regions.html","id":"the-with_regions-argument","dir":"Articles","previous_headings":"","what":"The with_regions argument","title":"Converting regional GDP data","text":"Use with_regions argument (default NULL) convertGDP convert aggregated GDP data, e.g. regional-level data.","code":""},{"path":"https://pik-piam.github.io/GDPuc/articles/with_regions.html","id":"with_regions-a-data-frame-with-a-country-to-region-mapping","dir":"Articles","previous_headings":"The with_regions argument","what":"with_regions = a data-frame with a country-to-region mapping","title":"Converting regional GDP data","text":"passed data-frame country--region mapping, custom regional codons recognized. data-frame two columns, one named “iso3c” iso3c country codes, one named “region” corresponding region codes. conversion regional values undertaken disaggregating regions country level using mapping, weighed GDP shares countries within region base year unit_in (compute shares, source object needs GDP data countries within region).","code":"library(GDPuc)  my_gdp <- tibble::tibble(   iso3c = \"EUR\",    year = 2010:2014,    value = 100:104 )  my_mapping_data_frame <- tibble::tibble(   iso3c = c(\"DEU\", \"FRA\", \"ESP\", \"ITA\"),    region = \"EUR\" )  convertGDP(   gdp = my_gdp,    unit_in = \"constant 2005 Int$PPP\",    unit_out = \"constant 2017 Int$PPP\",   with_regions = my_mapping_data_frame,   verbose = TRUE ) #> ℹ Dissaggreagting regions using GDP in constant 2005 Int$PPP as weights. #> ℹ Converting GDP with conversion factors from wb_wdi: #> constant 2005 Int$PPP → constant 2005 LCU #> 2005 PPP conversion factors in (LCU per international $) used: #> DEU: 0.872721 #> ESP: 0.769508 #> FRA: 0.916458 #> ITA: 0.855139 #> constant 2005 LCU → constant 2017 LCU #> 2017 value of base 2005 GDP deflators in (constant 2017 LCU per constant 2005 #> LCU) used: #> DEU: 1.17967 #> ESP: 1.1273 #> FRA: 1.14739 #> ITA: 1.18511 #> constant 2017 LCU → constant 2017 Int$PPP #> 2017 PPP conversion factors in (LCU per international $) used: #> DEU: 0.744783 #> ESP: 0.630839 #> FRA: 0.770109 #> ITA: 0.689895 #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 EUR    2010  140. #> 2 EUR    2011  141. #> 3 EUR    2012  142. #> 4 EUR    2013  144. #> 5 EUR    2014  145."},{"path":"https://pik-piam.github.io/GDPuc/articles/with_regions.html","id":"with_regions-a-string-with-a-madrat-regionmapping","dir":"Articles","previous_headings":"The with_regions argument","what":"with_regions = a string with a madrat regionmapping","title":"Converting regional GDP data","text":"passed string, corresponding regionmapping loaded madrat::toolGetMapping. Requires madrat installed, regionmapping exist.","code":"my_gdp <- tibble::tibble(   iso3c = \"EUR\",    value = 100 )  convertGDP(   gdp = my_gdp,    unit_in = \"constant 2005 Int$PPP\",    unit_out = \"constant 2017 Int$PPP\",   with_regions = \"regionmappingH12.csv\" ) #> # A tibble: 1 × 2 #>   iso3c value #>   <chr> <dbl> #> 1 EUR    138."},{"path":"https://pik-piam.github.io/GDPuc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Koch. Author, maintainer.","code":""},{"path":"https://pik-piam.github.io/GDPuc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koch J (2025). GDPuc: Easily Convert GDP Data. R package version 1.5.0, https://github.com/pik-piam/GDPuc.","code":"@Manual{,   title = {GDPuc: Easily Convert GDP Data},   author = {Johannes Koch},   year = {2025},   note = {R package version 1.5.0},   url = {https://github.com/pik-piam/GDPuc}, }"},{"path":"https://pik-piam.github.io/GDPuc/index.html","id":"gdpuc","dir":"","previous_headings":"","what":"Easily Convert GDP Data","title":"Easily Convert GDP Data","text":"GDPuc (.k.. GDP unit-converter) provides simple function convert GDP time-series data one unit another. note: default conversion parameters World Bank’s World Development Indicators (WDI) database (see link). current parameters April 30th 2024, next update planned April 2026.","code":""},{"path":"https://pik-piam.github.io/GDPuc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easily Convert GDP Data","text":"","code":"# Install from CRAN install.packages(\"GDPuc\")  # Or the development version from GitHub remotes::install_github(\"pik-piam/GDPuc\")"},{"path":"https://pik-piam.github.io/GDPuc/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Easily Convert GDP Data","text":"Load package. main function package convertGDP. , gdp argument takes tibble data-frame contains, least: column iso3c country codes, (ideally named “iso3c”), column year, (ideally named “year”), column named “value”, gdp data. unit_in unit_out arguments specify incoming outgoing GDP units. common GDP units supported, .e.: current LCU current US$MER current Int$PPP constant YYYY LCU constant YYYY US$MER constant YYYY Int$PPP “YYYY” placeholder year, e.g. “2010” “2015”, “LCU” stands Local Currency Unit. quick conversion single value use convertSingle.","code":"library(GDPuc) convertGDP(   gdp = my_gdp,   unit_in = \"constant 2005 LCU\",   unit_out = \"constant 2017 Int$PPP\" ) convertSingle(   x = 100,   iso3c = \"FRA\",   year = 2000,   unit_in = \"current LCU\",   unit_out = \"constant 2017 Int$PPP\" )"},{"path":"https://pik-piam.github.io/GDPuc/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Easily Convert GDP Data","text":"","code":"library(GDPuc)  my_gdp <- tibble::tibble(   iso3c = \"USA\",   year = 2010:2014,   value = 100:104 ) print(my_gdp) #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <int> #> 1 USA    2010   100 #> 2 USA    2011   101 #> 3 USA    2012   102 #> 4 USA    2013   103 #> 5 USA    2014   104  convertGDP(   gdp = my_gdp,   unit_in = \"constant 2005 LCU\",   unit_out = \"constant 2017 Int$PPP\" ) #> # A tibble: 5 × 3 #>   iso3c  year value #>   <chr> <int> <dbl> #> 1 USA    2010  123. #> 2 USA    2011  124. #> 3 USA    2012  126. #> 4 USA    2013  127. #> 5 USA    2014  128.  convertSingle(   x = 100,   iso3c = \"USA\",   year = 2010,   unit_in = \"current LCU\",   unit_out = \"constant 2017 Int$PPP\" ) #> [1] 112.0447  # When converting between constant currencies, the year of the GDP value is not important, # and can be left out. convertSingle(   x = 100,   iso3c = \"USA\",   unit_in = \"constant 2005 LCU\",   unit_out = \"constant 2017 Int$PPP\" ) #> [1] 123.1357"},{"path":"https://pik-piam.github.io/GDPuc/index.html","id":"further-options","dir":"","previous_headings":"","what":"Further Options","title":"Easily Convert GDP Data","text":"convertGDP arguments allow : choose conversion factors (see “Choosing conversion factors”) print information conversion process /return conversion factors used (see “Getting information conversion process”) handle missing conversion factors (see “Handling missing conversion factors”) convert regional GDP data (see “Converting regional GDP data”)","code":""},{"path":"https://pik-piam.github.io/GDPuc/index.html","id":"madrat-wrappers","dir":"","previous_headings":"","what":"Madrat wrappers","title":"Easily Convert GDP Data","text":"using GDPuc functions within madrat ecosystem, recommended use wrappers starting tool, .e. GDPuc::toolConvertGDP() GDPuc::toolConvertSingle(), madrat caching work include GDPuc function.","code":""},{"path":"https://pik-piam.github.io/GDPuc/reference/GDPuc-package.html","id":null,"dir":"Reference","previous_headings":"","what":"GDPuc package — GDPuc-package","title":"GDPuc package — GDPuc-package","text":"Convert GDP time series data one unit another. common GDP units included, .e. current constant local currency units, US$ via market exchange rates international dollars via purchasing power parities.","code":""},{"path":[]},{"path":"https://pik-piam.github.io/GDPuc/reference/GDPuc-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GDPuc package — GDPuc-package","text":"Maintainer: Johannes Koch jokoch@pik-potsdam.de","code":""},{"path":"https://pik-piam.github.io/GDPuc/reference/convertGDP.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GDP data — convertGDP","title":"Convert GDP data — convertGDP","text":"convertGDP() converts GDP time series data one unit another, using GDP deflators, market exchange rates (MERs) purchasing power parity conversion factors (PPPs).","code":""},{"path":"https://pik-piam.github.io/GDPuc/reference/convertGDP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GDP data — convertGDP","text":"","code":"convertGDP(   gdp,   unit_in,   unit_out,   source = \"wb_wdi\",   use_USA_cf_for_all = FALSE,   with_regions = NULL,   replace_NAs = NULL,   verbose = getOption(\"GDPuc.verbose\", default = FALSE),   return_cfs = FALSE )  convertCPI(...)  convertSingle(x, iso3c, year = NULL, unit_in, unit_out, ...)  toolConvertGDP(   gdp,   unit_in,   unit_out,   source = \"wb_wdi\",   use_USA_cf_for_all = FALSE,   with_regions = NULL,   replace_NAs = NULL,   verbose = getOption(\"GDPuc.verbose\", default = FALSE),   return_cfs = FALSE )  toolConvertSingle(x, iso3c, year = NULL, unit_in, unit_out, ...)  toolConvertCPI(...)"},{"path":"https://pik-piam.github.io/GDPuc/reference/convertGDP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GDP data — convertGDP","text":"gdp tibble, data frame magpie object, latter requires magclass package installed. data-frame needs least 2 columns, cases 3: character column iso3c (wikipedia) country codes, numeric column years (required converting current currencies), numeric column named \"value\" GDP values. unit_in string incoming GDP unit, one : \"current LCU\" \"current Int$PPP\" \"current US$MER\" \"constant YYYY LCU\" \"constant YYYY Int$PPP\" \"constant YYYY US$MER\" \"constant YYYY €\" \"constant YYYY EUR\" \"constant YYYY xxx_CU\" YYYY replaced year e.g. \"2010\" \"2017\". unit_out string outgoing GDP unit, one : \"current LCU\" \"current Int$PPP\" \"current US$MER\" \"constant YYYY LCU\" \"constant YYYY Int$PPP\" \"constant YYYY US$MER\" \"constant YYYY €\" \"constant YYYY EUR\" \"constant YYYY xxx_CU\" YYYY replaced year e.g. \"2010\" \"2017\", xxx valid iso3c country code, e.g. \"JPN_CU\" pick currency unit Japan. source string referring package internal data frame containing conversion factors, data-frame exists calling environment. Use print_source_info() learn available sources. use_USA_cf_for_all TRUE FALSE (default). TRUE, USA conversion factors used countries. with_regions NULL default, meaning regional codons recognized. convert regional data, \"country region mapping\" must passed function. regions disaggregated according region mapping weighed GDP share countries region year unit (constant units compatible with_regions equal NULL), converted country level, re-aggregated returned. Can set one following: character string referring madrat regionmapping. Requires madrat installed, mapping accessible via madrat::toolGetMapping(). data-frame country region mapping: one column named \"iso3c\" iso3c country codes, one column named \"region\" region codes countries belong. replace_NAs NULL default, meaning NA replacement. Can set one following: 0: resulting NAs simply replaced 0. NA: resulting NAs explicitly kept NA. \"no_conversion\": resulting NAs simply replaced values gdp argument. \"linear\": missing conversion factors source object inter- extrapolated linearly. extrapolation, closest 5 data points used. \"regional_average\": missing conversion factors source object replaced regional average region country belongs. requires region-mapping passed function, see with_regions argument. \"with_USA\": missing conversion factors source object extended using US growth rates. possible (instance conversion factor missing entirely) conversion factors replaced US ones. example, conversion requires PPPs deflators, PPPs missing entirely, even though deflator data, US deflator used. Can also vector \"linear\" first element, e.g. c(\"linear\", 0) c(\"linear\", \"no_conversion\"), case, operations done sequence. verbose TRUE FALSE. flag turn verbosity . default equal GDPuc.verbose option, FALSE set TRUE user. return_cfs TRUE FALSE. Set TRUE additionally return tibble conversion factors used. case list returned converted GDP \"result\", conversion factors used \"cfs\". ... Arguments passed convertGDP() x Number convert iso3c Country code year NULL, year value. plays role converting current currencies.","code":""},{"path":"https://pik-piam.github.io/GDPuc/reference/convertGDP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GDP data — convertGDP","text":"gdp argument, values \"value\" column, converted unit_out. argument return_cfs TRUE, list returned converted GDP \"result\", conversion factors used \"cfs\".","code":""},{"path":"https://pik-piam.github.io/GDPuc/reference/convertGDP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert GDP data — convertGDP","text":"providing custom source function, certain format required. source object must data frame tibble least following columns: character column named \"iso3c\" iso3c (wikipedia) country codes, numeric column named \"year\" years, numeric column named \"GDP deflator\" values GDP deflator divided 100 (base year GDP deflator equal 1, 100). base year deflator can year, can country-specific. numeric column named \"MER (LCU per US$)\" MER values, numeric column named \"PPP conversion factor, GDP (LCU per international $)\" wit PPP exchange rate values.","code":""},{"path":"https://pik-piam.github.io/GDPuc/reference/convertGDP.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Convert GDP data — convertGDP","text":"convertCPI(): Short cut convertGDP(..., source = \"wb_wdi_cpi\") convertSingle(): Convert single value, specifying iso3c code year. Simpler creating single row tibble. toolConvertGDP(): Madrat wrapper around convertGDP() toolConvertSingle(): Madrat wrapper around convertSingle() toolConvertCPI(): Madrat wrapper around convertCPI(...)","code":""},{"path":[]},{"path":"https://pik-piam.github.io/GDPuc/reference/convertGDP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GDP data — convertGDP","text":"","code":"my_tbble <- tibble::tibble(iso3c = \"FRA\",                              year = 2013,                              value = 100)    convertGDP(gdp = my_tbble,              unit_in = \"current LCU\",              unit_out = \"constant 2015 Int$PPP\") #> # A tibble: 1 × 3 #>   iso3c  year value #>   <chr> <dbl> <dbl> #> 1 FRA    2013  126.    # Convert using the CPI as deflator.   convertGDP(gdp = my_tbble,              unit_in = \"current LCU\",              unit_out = \"constant 2015 Int$PPP\",              source = \"wb_wdi_cpi\") #> # A tibble: 1 × 3 #>   iso3c  year value #>   <chr> <dbl> <dbl> #> 1 FRA    2013  124.   # Or using the shortcut `convertCPI()`   convertCPI(gdp = my_tbble,              unit_in = \"current LCU\",              unit_out = \"constant 2015 Int$PPP\") #> # A tibble: 1 × 3 #>   iso3c  year value #>   <chr> <dbl> <dbl> #> 1 FRA    2013  124.    # Convert a single value quickly   convertSingle(x = 100,                 iso3c = \"FRA\",                 year = 2013,                 unit_in = \"current LCU\",                 unit_out = \"constant 2015 Int$PPP\") #> [1] 125.7852"},{"path":"https://pik-piam.github.io/GDPuc/reference/print_source_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information on sources — print_source_info","title":"Print information on sources — print_source_info","text":"Print detailed information conversion factor sources screen. Information includes name, origin, date, html-link associated note. Calling function without argument print information available sources.","code":""},{"path":"https://pik-piam.github.io/GDPuc/reference/print_source_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information on sources — print_source_info","text":"","code":"print_source_info(source)"},{"path":"https://pik-piam.github.io/GDPuc/reference/print_source_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information on sources — print_source_info","text":"source Empty, name one internal sources: \"wb_wdi\" \"wb_wdi_linked\" \"wb_wdi_cpi\"","code":""},{"path":"https://pik-piam.github.io/GDPuc/reference/print_source_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print information on sources — print_source_info","text":"return value, called side effects.","code":""},{"path":"https://pik-piam.github.io/GDPuc/reference/print_source_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print information on sources — print_source_info","text":"","code":"print_source_info() #> ℹ Sources available: #> ── wb_wdi ────────────────────────────────────────────────────────────────────── #> → Origin: The World Bank's World Development Indicator Database #> → Date: Downloaded on the 30th of April 2024 #> → Html: https://databank.worldbank.org/source/world-development-indicators #> → Note: Uses the GDP deflator. #> ──────────────────────────────────────────────────────────────────────────────── #> ── wb_wdi_linked ─────────────────────────────────────────────────────────────── #> → Origin: The World Bank's World Development Indicator Database #> → Date: Downloaded on the 30th of April 2024 #> → Html: https://databank.worldbank.org/source/world-development-indicators #> → Note: Uses the linked GDP deflator. #> ──────────────────────────────────────────────────────────────────────────────── #> ── wb_wdi_cpi ────────────────────────────────────────────────────────────────── #> → Origin: The World Bank's World Development Indicator Database #> → Date: Downloaded on the 30th of April 2024 #> → Html: https://databank.worldbank.org/source/world-development-indicators #> → Note: Uses the CPI as deflator. #> ────────────────────────────────────────────────────────────────────────────────"},{"path":"https://pik-piam.github.io/GDPuc/news/index.html","id":"gdpuc-104","dir":"Changelog","previous_headings":"","what":"GDPuc 1.0.4","title":"GDPuc 1.0.4","text":"CRAN release: 2024-09-04 Improve internal column detection Allow magclass objects without years","code":""},{"path":"https://pik-piam.github.io/GDPuc/news/index.html","id":"gdpuc-100","dir":"Changelog","previous_headings":"","what":"GDPuc 1.0.0","title":"GDPuc 1.0.0","text":"CRAN release: 2024-06-05 Update wdi conversion factors data Add CPI possible deflator Add two shortcut functions using CPI deflator convert single value (fixed #20) Add example convertGDP (fixes #21) Add options convert constant € use US deflator Add with_USA option replace_NAs Relax restriction presence year column (fixes #17) Improve order tests Use magclass::as_tibble() instead custom function","code":""},{"path":"https://pik-piam.github.io/GDPuc/news/index.html","id":"gdpuc-0111","dir":"Changelog","previous_headings":"","what":"GDPuc 0.11.1","title":"GDPuc 0.11.1","text":"CRAN release: 2023-07-20 Clean Suggest field, order comply CRAN specifications Improve documentation","code":""},{"path":"https://pik-piam.github.io/GDPuc/news/index.html","id":"gdpuc-0110","dir":"Changelog","previous_headings":"","what":"GDPuc 0.11.0","title":"GDPuc 0.11.0","text":"CRAN release: 2023-06-19 Fix issue #15. cfs data-frame returned “return_cfs = TRUE” now displays correct conversion factors. Get rid dplyr warnings improve tests","code":""},{"path":"https://pik-piam.github.io/GDPuc/news/index.html","id":"gdpuc-0100","dir":"Changelog","previous_headings":"","what":"GDPuc 0.10.0","title":"GDPuc 0.10.0","text":"CRAN release: 2023-01-05 Get rid tidyselect warnings improve tests","code":""},{"path":"https://pik-piam.github.io/GDPuc/news/index.html","id":"gdpuc-092","dir":"Changelog","previous_headings":"","what":"GDPuc 0.9.2","title":"GDPuc 0.9.2","text":"CRAN release: 2022-09-19 Transfer base repo pik-piam organization update documentation links accordingly.","code":""},{"path":"https://pik-piam.github.io/GDPuc/news/index.html","id":"gdpuc-090","dir":"Changelog","previous_headings":"","what":"GDPuc 0.9.0","title":"GDPuc 0.9.0","text":"CRAN release: 2022-04-07 Add option GDPuc.warn corresponding vignette. Add replace_NAs argument option NA, silence warning NA creation.","code":""},{"path":"https://pik-piam.github.io/GDPuc/news/index.html","id":"gdpuc-080","dir":"Changelog","previous_headings":"","what":"GDPuc 0.8.0","title":"GDPuc 0.8.0","text":"CRAN release: 2022-02-15 Add options “no_conversion” replace_NAs argument. replace_NAs argument can now take vector allowing combination options.","code":""},{"path":"https://pik-piam.github.io/GDPuc/news/index.html","id":"gdpuc-070","dir":"Changelog","previous_headings":"","what":"GDPuc 0.7.0","title":"GDPuc 0.7.0","text":"CRAN release: 2022-02-08 Add argument return_cfs return conversion factors used. Add options “linear” “linear_regional_average” replace_NAs argument. Add vignettes Remove dependency stringr package Improve tests","code":""},{"path":"https://pik-piam.github.io/GDPuc/news/index.html","id":"gdpuc-051","dir":"Changelog","previous_headings":"","what":"GDPuc 0.5.1","title":"GDPuc 0.5.1","text":"CRAN release: 2021-10-26 First public release.","code":""}]
